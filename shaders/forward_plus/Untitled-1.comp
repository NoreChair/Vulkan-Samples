
**** Platform OpenGL ES 3:
Compiled code for kernel CSMain
keywords: <none>
#version 310 es
#ifdef GL_OES_shader_image_atomic
#extension GL_OES_shader_image_atomic : enable
#endif

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
UNITY_BINDING(0) uniform LightGridCB {
	uvec2 viewport;
	float invTileDim;
	float rcpZMagic;
	uint tileCountX;
	uint lightBufferCount;
	vec4 hlslcc_mtx4x4viewProjMatrix[4];
};
 struct lightBuffer_type {
	uint[16] value;
};

layout(std430, binding = 2) readonly buffer lightBuffer {
	lightBuffer_type lightBuffer_buf[];
};
UNITY_LOCATION(0) uniform mediump sampler2D depthTexture;
layout(std430, binding = 0) buffer lightGrid {
	uint lightGrid_buf[];
};
layout(std430, binding = 1) buffer lightGridBitMask {
	uint lightGridBitMask_buf[];
};
vec4 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
int u_xlati1;
uvec4 u_xlatu1;
vec4 u_xlat2;
uvec2 u_xlatu2;
vec4 u_xlat3;
vec4 u_xlat4;
vec4 u_xlat5;
float u_xlat6;
uint u_xlatu6;
vec4 u_xlat7;
int u_xlati7;
vec3 u_xlat8;
int u_xlati8;
bool u_xlatb8;
vec3 u_xlat9;
vec2 u_xlat10;
int u_xlati10;
uint u_xlatu10;
bool u_xlatb10;
uint u_xlatu11;
uint u_xlatu16;
uint u_xlatu18;
int u_xlati20;
uint u_xlatu20;
bool u_xlatb20;
vec2 u_xlat21;
int u_xlati26;
bool u_xlatb26;
float u_xlat28;
uint u_xlatu30;
float u_xlat36;
int u_xlati36;
uint u_xlatu36;
float u_xlat37;
bool u_xlatb37;
float u_xlat38;
vec4 TempArray0[6];
vec4 TempArray1[6];
shared uint TGSM0[1];
shared uint TGSM1[1];
shared uint TGSM2[1];
shared uint TGSM3[1];
shared struct {
	uint value[1];
} TGSM4[128];
shared struct {
	uint value[1];
} TGSM5[128];
shared uint TGSM6[4];
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main()
{
    u_xlatb0.xy = greaterThanEqual(gl_GlobalInvocationID.xyxx, viewport.xyxx).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        u_xlat0.x = -1.0;
    } else {
        u_xlatu1.xy = gl_GlobalInvocationID.xy;
        u_xlatu1.z = uint(0u);
        u_xlatu1.w = uint(0u);
        u_xlat0.x = texelFetch(depthTexture, ivec2(u_xlatu1.xy), int(u_xlatu1.w)).x;
    }
    if(gl_LocalInvocationIndex == uint(0)) {
        TGSM0[(0 >> 2)] = 4294967295u;
        TGSM1[(0 >> 2)] = 0u;
        TGSM2[(0 >> 2)] = 0u;
        TGSM3[(0 >> 2)] = 0u;
        TGSM6[(0 >> 2)] = uint(0u);
        TGSM6[(0 >> 2) + 1] = uint(0u);
        TGSM6[(0 >> 2) + 2] = uint(0u);
        TGSM6[(0 >> 2) + 3] = uint(0u);
    }
    memoryBarrierShared();
    barrier();
    u_xlatb10 = u_xlat0.x!=-1.0;
    if(u_xlatb10){
        atomicMin(TGSM0[0 >> 2], uint(floatBitsToUint(u_xlat0.x)));
        atomicMax(TGSM1[0 >> 2], uint(floatBitsToUint(u_xlat0.x)));
    }
    memoryBarrierShared();
    barrier();
    u_xlat0.x = uintBitsToFloat(TGSM0[(0 >> 2) + 0]);
    u_xlat0.x = float(1.0) / float(u_xlat0.x);
    u_xlat0.x = u_xlat0.x + -1.0;
    u_xlat0.x = u_xlat0.x * rcpZMagic;
    u_xlat10.x = uintBitsToFloat(TGSM1[(0 >> 2) + 0]);
    u_xlat10.x = float(1.0) / float(u_xlat10.x);
    u_xlat10.x = u_xlat10.x + -1.0;
    u_xlat10.x = u_xlat10.x * rcpZMagic + (-u_xlat0.x);
    u_xlat10.x = max(u_xlat10.x, 1.17549435e-38);
    u_xlat1.x = float(1.0) / float(u_xlat10.x);
    u_xlat10.xy = vec2(viewport.xy);
    u_xlat2.xy = u_xlat10.xy * vec2(vec2(invTileDim, invTileDim));
    u_xlat10.xy = vec2(gl_WorkGroupID.xy);
    u_xlat10.xy = u_xlat10.xy * vec2(-2.0, -2.0) + u_xlat2.xy;
    u_xlat2.zw = u_xlat10.xy + vec2(-1.0, -1.0);
    u_xlat1.y = (-u_xlat0.x) * u_xlat1.x;
    u_xlat0.x = dot(u_xlat2.xz, hlslcc_mtx4x4viewProjMatrix[0].xw);
    u_xlat0.y = dot(u_xlat2.xz, hlslcc_mtx4x4viewProjMatrix[1].xw);
    u_xlat0.z = dot(u_xlat2.xz, hlslcc_mtx4x4viewProjMatrix[2].xw);
    u_xlat0.w = dot(u_xlat2.xz, hlslcc_mtx4x4viewProjMatrix[3].xw);
    u_xlat21.xy = u_xlat2.yw * vec2(-1.0, 1.0);
    u_xlat2.x = dot(u_xlat21.xy, hlslcc_mtx4x4viewProjMatrix[0].yw);
    u_xlat2.y = dot(u_xlat21.xy, hlslcc_mtx4x4viewProjMatrix[1].yw);
    u_xlat2.z = dot(u_xlat21.xy, hlslcc_mtx4x4viewProjMatrix[2].yw);
    u_xlat2.w = dot(u_xlat21.xy, hlslcc_mtx4x4viewProjMatrix[3].yw);
    u_xlat3.x = dot(u_xlat1.xy, hlslcc_mtx4x4viewProjMatrix[0].zw);
    u_xlat3.y = dot(u_xlat1.xy, hlslcc_mtx4x4viewProjMatrix[1].zw);
    u_xlat3.z = dot(u_xlat1.xy, hlslcc_mtx4x4viewProjMatrix[2].zw);
    u_xlat3.w = dot(u_xlat1.xy, hlslcc_mtx4x4viewProjMatrix[3].zw);
    u_xlat1.x = hlslcc_mtx4x4viewProjMatrix[0].w;
    u_xlat1.y = hlslcc_mtx4x4viewProjMatrix[1].w;
    u_xlat1.z = hlslcc_mtx4x4viewProjMatrix[2].w;
    u_xlat1.w = hlslcc_mtx4x4viewProjMatrix[3].w;
    u_xlat4 = u_xlat0 + u_xlat1;
    u_xlat0 = (-u_xlat0) + u_xlat1;
    u_xlat5 = u_xlat2 + u_xlat1;
    u_xlat2 = (-u_xlat2) + u_xlat1;
    u_xlat3 = (-u_xlat3) + u_xlat1;
    u_xlat6 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat4 = u_xlat4 * vec4(u_xlat6);
    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat0 = u_xlat0 * vec4(u_xlat6);
    u_xlat6 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat5 = u_xlat5 * vec4(u_xlat6);
    u_xlat6 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat2 = u_xlat2 * vec4(u_xlat6);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1 = u_xlat1 * vec4(u_xlat6);
    u_xlat6 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat3 = u_xlat3 * vec4(u_xlat6);
    u_xlatu6 = min(lightBufferCount, 128u);
    for(uint u_xlatu_loop_1 = gl_LocalInvocationIndex ; u_xlatu_loop_1<u_xlatu6 ; u_xlatu_loop_1 = u_xlatu_loop_1 + 64u)
    {
        u_xlati26 = int(lightBuffer_buf[u_xlatu_loop_1].value[(60 >> 2) + 0]);
        switch(u_xlati26){
            case 0:
                u_xlat7 = vec4(uintBitsToFloat(lightBuffer_buf[u_xlatu_loop_1].value[(0 >> 2) + 0]), uintBitsToFloat(lightBuffer_buf[u_xlatu_loop_1].value[(0 >> 2) + 1]), uintBitsToFloat(lightBuffer_buf[u_xlatu_loop_1].value[(0 >> 2) + 2]), uintBitsToFloat(lightBuffer_buf[u_xlatu_loop_1].value[(0 >> 2) + 3]));
                TempArray0[0] = u_xlat4;
                TempArray0[1] = u_xlat0;
                TempArray0[2] = u_xlat5;
                TempArray0[3] = u_xlat2;
                TempArray0[4] = u_xlat1;
                TempArray0[5] = u_xlat3;
                u_xlati26 = int(int(0xFFFFFFFFu));
                for(uint u_xlatu_loop_2 = uint(0u) ; u_xlatu_loop_2<6u ; u_xlatu_loop_2++)
                {
                    u_xlat8.xyz = TempArray0[int(u_xlatu_loop_2)].xyz;
                    u_xlat38 = TempArray0[int(u_xlatu_loop_2)].w;
                    u_xlat8.x = dot(u_xlat8.xyz, u_xlat7.xyz);
                    u_xlat8.x = u_xlat38 + u_xlat8.x;
                    u_xlatb8 = u_xlat8.x<(-u_xlat7.w);
                    if(u_xlatb8){
                        u_xlati26 = 0;
                        break;
                    }
                }
                if(u_xlati26 != 0) {
                    u_xlati7 = int(atomicAdd(TGSM2[0 >> 2], 1u));
                    TGSM4[u_xlati7].value[(0 >> 2)] = u_xlatu_loop_1;
                }
                break;
            case 1:
                u_xlat7.xyz = vec3(uintBitsToFloat(lightBuffer_buf[u_xlatu_loop_1].value[(16 >> 2) + 0]), uintBitsToFloat(lightBuffer_buf[u_xlatu_loop_1].value[(16 >> 2) + 1]), uintBitsToFloat(lightBuffer_buf[u_xlatu_loop_1].value[(16 >> 2) + 2]));
                u_xlat36 = uintBitsToFloat(lightBuffer_buf[u_xlatu_loop_1].value[(44 >> 2) + 0]);
                TempArray1[0] = u_xlat4;
                TempArray1[1] = u_xlat0;
                TempArray1[2] = u_xlat5;
                TempArray1[3] = u_xlat2;
                TempArray1[4] = u_xlat1;
                TempArray1[5] = u_xlat3;
                u_xlati8 = int(int(0xFFFFFFFFu));
                for(uint u_xlatu_loop_3 = uint(0u) ; u_xlatu_loop_3<6u ; u_xlatu_loop_3++)
                {
                    u_xlat9.xyz = TempArray1[int(u_xlatu_loop_3)].xyz;
                    u_xlat37 = TempArray1[int(u_xlatu_loop_3)].w;
                    u_xlat28 = dot(u_xlat9.xyz, u_xlat7.xyz);
                    u_xlat37 = u_xlat37 + u_xlat28;
                    u_xlatb37 = u_xlat37<(-u_xlat36);
                    if(u_xlatb37){
                        u_xlati8 = 0;
                        break;
                    }
                }
                if(u_xlati8 != 0) {
                    u_xlati7 = int(atomicAdd(TGSM3[0 >> 2], 1u));
                    TGSM5[u_xlati7].value[(0 >> 2)] = u_xlatu_loop_1;
                }
                break;
            default:
                break;
        }
        u_xlatu36 = u_xlatu_loop_1 >> 5u;
        switch(int(u_xlatu36)){
            case 0:
                u_xlati36 = 1 << int(u_xlatu_loop_1);
                atomicOr(TGSM6[0 >> 2], uint(u_xlati36));
                break;
            case 1:
                u_xlati36 = 1 << int(u_xlatu_loop_1);
                atomicOr(TGSM6[4 >> 2], uint(u_xlati36));
                break;
            case 2:
                u_xlati36 = 1 << int(u_xlatu_loop_1);
                atomicOr(TGSM6[8 >> 2], uint(u_xlati36));
                break;
            case 3:
                u_xlati36 = 1 << int(u_xlatu_loop_1);
                atomicOr(TGSM6[12 >> 2], uint(u_xlati36));
                break;
            default:
                break;
        }
    }
    memoryBarrierShared();
    barrier();
    if(gl_LocalInvocationIndex == uint(0)) {
        u_xlati0 = int(gl_WorkGroupID.y) * int(tileCountX) + int(gl_WorkGroupID.x);
        u_xlati10 = u_xlati0 * 272;
        u_xlatu20 = TGSM2[(0 >> 2) + 0];
        u_xlatu30 = u_xlatu20 & 255u;
        u_xlatu1.x = TGSM3[(0 >> 2) + 0];
        u_xlatu11 = u_xlatu1.x & 255u;
        u_xlati1 = int(bitfieldInsert(0,int(u_xlatu1.x),8,8) );
        u_xlati20 = int(bitfieldInsert(u_xlati1,int(u_xlatu20),0,8) );
        lightGrid_buf[(u_xlati10 >> 2)] = uint(u_xlati20);
        u_xlatu10 = uint(u_xlati0) * 272u + 16u;
        u_xlatu1.x = u_xlatu10;
        u_xlatu1.z = 0u;
        while(true){
            u_xlatb20 = u_xlatu1.z>=u_xlatu30;
            if(u_xlatb20){break;}
            u_xlati20 = int(TGSM4[u_xlatu1.z].value[(0 >> 2) + 0]);
            lightGrid_buf[(u_xlatu1.x >> 2u)] = uint(u_xlati20);
            u_xlatu1.xz = u_xlatu1.xz + uvec2(4u, 1u);
        }
        u_xlatu2.x = u_xlatu1.x;
        u_xlatu2.y = 0u;
        while(true){
            u_xlatb10 = u_xlatu2.y>=u_xlatu11;
            if(u_xlatb10){break;}
            u_xlati10 = int(TGSM5[u_xlatu2.y].value[(0 >> 2) + 0]);
            lightGrid_buf[(u_xlatu2.x >> 2u)] = uint(u_xlati10);
            u_xlatu2.xy = u_xlatu2.xy + uvec2(4u, 1u);
        }
        u_xlati0 = u_xlati0 << 4;
        u_xlatu1 = uvec4(TGSM6[(0 >> 2) + 0], TGSM6[(0 >> 2) + 1], TGSM6[(0 >> 2) + 2], TGSM6[(0 >> 2) + 3]);
        lightGridBitMask_buf[(u_xlati0 >> 2)] = u_xlatu1.x;
        lightGridBitMask_buf[(u_xlati0 >> 2) + 1] = u_xlatu1.y;
        lightGridBitMask_buf[(u_xlati0 >> 2) + 2] = u_xlatu1.z;
        lightGridBitMask_buf[(u_xlati0 >> 2) + 3] = u_xlatu1.w;
    }
    return;
}