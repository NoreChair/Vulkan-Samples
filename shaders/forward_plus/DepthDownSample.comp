#version 450 core
precision highp float;

layout(push_constant, std430) uniform Uniforms
{
	int mipmapLevel;
};

layout(set = 0, binding = 0) uniform sampler2D linearDepth;
layout(set = 0, r32f, binding = 1) writeonly uniform image2D lowerDepth;

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

void main()
{
	ivec2 extent = textureSize(linearDepth, mipmapLevel - 1);
	const vec2 invSize = 1.0 / vec2(extent);
	const vec2 uv      = (vec2(gl_GlobalInvocationID.xy) * 2.0 + 0.5) * invSize;

	if (gl_GlobalInvocationID.x >= extent.x || gl_GlobalInvocationID.y >= extent.y)
	{
		return;
	}

	vec4  depth    = vec4(textureLod(linearDepth, uv, mipmapLevel - 1).r, textureLod(linearDepth, uv - invSize, mipmapLevel - 1).r,
	                      textureLod(linearDepth, uv - invSize * vec2(1.0, 0.0), mipmapLevel - 1).r, textureLod(linearDepth, uv - invSize * vec2(0.0, 1.0), mipmapLevel - 1).r);
	float minDepth = min(min(depth.x, depth.y), min(depth.z, depth.w));
	imageStore(lowerDepth, ivec2(gl_GlobalInvocationID.xy), vec4(minDepth));
}