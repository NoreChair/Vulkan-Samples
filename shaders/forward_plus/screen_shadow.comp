#version 320 es
precision highp float;

layout(set = 0, binding = 0) uniform Uniforms{
    uvec2 extent;
    vec2 rcpExtent;
    // vec4 cameraPosition;
    // vec4 cameraCorner; // left bottom
    // vec4 cameraProjectPlane[2]; // h v
    mat4 invMainVP;
    mat4 shadowVP;
};

layout(set = 0, binding = 1) uniform sampler2D sceneDepth;
layout(set = 0, binding = 2) uniform sampler2D shadowMap;
layout(set = 0, binding = 3) writeonly uniform highp image2D screenShadow;


layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

void main(){
    uvec2 threadIndex = gl_GlobalInvocationID.xy;

    if(threadIndex.x >= extent.x || threadIndex.y >= extent.y){
        return;
    }

    vec2 uv = vec2(threadIndex) * rcpExtent;
    float depth = textureLod(sceneDepth, uv, 0.0).r;
    vec4 clipSpace = vec4(uv * vec2(2.0) - vec2(1.0), depth, 1.0);
    vec4 viewSpace = invMainVP * clipSpace;
    vec3 worldPos = viewSpace.xyz / viewSpace.w;

    vec4 positionSS = shadowVP * vec4(worldPos, 1.0);
    positionSS /= positionSS.w;
    positionSS.xy = positionSS.xy * vec2(0.5) + vec2(0.5);

    vec2 shadowUV = positionSS.xy;
    bvec4 outOfShadow = bvec4(shadowUV.x < 0.0, shadowUV.x > 1.0, shadowUV.y < 0.0, shadowUV.y > 1.0);

    if(any(outOfShadow)){
        imageStore(screenShadow, ivec2(threadIndex), vec4(0.5));
        return;
    }

    float compareDepth = positionSS.z;
    float shadowDepth = textureLod(shadowMap, shadowUV, 0.0).r;

    float shadowFactor = compareDepth < shadowDepth ? 1.0 : 0.0;
    imageStore(screenShadow, ivec2(threadIndex), vec4(shadowFactor));
}